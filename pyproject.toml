[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[project]
name = "iaxolab_scope"
authors = [
    { name = "Luis Obis", email = "luis.antonio.obis@gmail.com" },
]
description = "Utilities for interfacing with out oscilloscope"
requires-python = ">=3.10"
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
]
dynamic = ["version", "readme"]
dependencies = [
    "pyvisa-py",
    "pyserial",
    "pyusb",
    "psutil",
    "zeroconf",
    "numpy",
    "matplotlib",
]

[project.optional-dependencies]
test = [
    "pytest >=7",
]
dev = [
    "pytest >=7",
    "pre-commit",
]

[project.urls]
Homepage = "https://github.com/lobis/iaxolab-scope"
Source = "https://github.com/lobis/iaxolab-scope"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/iaxolab_scope/_version.py"

[tool.mypy]
mypy_path = ["src"]
files = ["src", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false

[tool.pylint]
master.py-version = "3.10"
master.ignore-paths = ["src/iaxolab_scope/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
    "design",
    "fixme",
    "line-too-long",
    "wrong-import-position",
    "redefined-builtin",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "invalid-name",
    "redefined-outer-name",
    "no-member", # better handled by mypy, etc.
]


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
    "B", # flake8-bugbear
    "I", # isort
    "ARG", # flake8-unused-arguments
    "C4", # flake8-comprehensions
    "EM", # flake8-errmsg
    "ICN", # flake8-import-conventions
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "TID251", # flake8-tidy-imports.banned-api
    "T20", # flake8-print
    "UP", # pyupgrade
    "YTT", # flake8-2020
]
ignore = [
    "PLR", # Design related pylint codes
    "PT004", # Incorrect check, usefixtures is the correct way to do this
    "RUF012", # Would require a lot of ClassVar's
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"importlib.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."
"importlib.resources.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."

[tool.repo-review]
ignore = ["RTD103"]
